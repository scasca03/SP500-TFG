{"cells":[{"cell_type":"markdown","metadata":{"id":"eptIJdHs4M-p"},"source":["**PREPARACION INICIAL DE LOS DATOS Y COMPROBACIÓN DE CARGA CORRECTA**\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":98,"status":"ok","timestamp":1747073466454,"user":{"displayName":"Santiago Cavassa","userId":"04930650576802271691"},"user_tz":-120},"id":"Xhu6nJEefVnn","outputId":"39f5ab2f-b28c-46db-dad2-211d8afd0272"},"outputs":[{"output_type":"stream","name":"stdout","text":["Columnas finales SPY: ['open', 'News Sentiment', 'open_AMZN', 'open_AVGO', 'open_BRK.B', 'open_GOOGL', 'open_GOOG', 'open_META', 'open_MSFT', 'open_NVDA', 'open_TSLA', 'RSI', 'ema_long', 'MACD', 'MACD_signal', 'bollinger_mid', 'bollinger_std', 'ATR', 'daily_return', 'monthly_return', 'annual_return']\n","Columnas finales AAPL: ['open', 'News Sentiment', 'open_AMZN', 'open_AVGO', 'open_BRK.B', 'open_GOOGL', 'open_GOOG', 'open_META', 'open_MSFT', 'open_NVDA', 'open_TSLA', 'RSI', 'ema_long', 'MACD', 'MACD_signal', 'bollinger_mid', 'bollinger_std', 'ATR', 'daily_return', 'monthly_return', 'annual_return']\n","21 21\n"]}],"source":["import pandas as pd\n","\n","# 1. Cargar datasets\n","ruta_aapl = \"/content/df_procesado_appl.csv\"\n","ruta_spy = \"/content/df_spy_lstm.csv\"\n","\n","df_spy = pd.read_csv(ruta_spy, index_col=0, parse_dates=True)\n","df_aapl = pd.read_csv(ruta_aapl, index_col=0, parse_dates=True)\n","\n","# 2. Limpiar nombres de columnas (eliminar espacios extra)\n","df_spy.columns = df_spy.columns.str.strip()\n","df_aapl.columns = df_aapl.columns.str.strip()\n","\n","# 3. Convertir el índice en columna (si es necesario)\n","if \"open\" not in df_aapl.columns:\n","    df_aapl[\"open\"] = df_aapl.index\n","    df_aapl.reset_index(drop=True, inplace=True)\n","\n","# 4. Eliminar variables que podrían sesgar el modelo\n","df_spy = df_spy.drop(columns=[\"volatility\"], errors=\"ignore\")\n","df_spy = df_spy.drop(columns=[\"open_AAPL\"], errors=\"ignore\")\n","df_aapl = df_aapl.drop(columns=[\"open_SPY\"], errors=\"ignore\")\n","\n","# 5. Filtrar columnas comunes para asegurar compatibilidad\n","columnas_comunes = [col for col in df_spy.columns if col in df_aapl.columns]\n","df_aapl = df_aapl[columnas_comunes]\n","\n","columnas_comunes = [col for col in df_aapl.columns if col in df_spy.columns]\n","df_spy = df_spy[columnas_comunes]\n","\n","# 6. Comprobación final\n","print(\"Columnas finales SPY:\", df_spy.columns.tolist())\n","print(\"Columnas finales AAPL:\", df_aapl.columns.tolist())\n","\n","x = len(df_spy.columns)\n","y = len(df_aapl.columns)\n","print(x, y)"]},{"cell_type":"markdown","metadata":{"id":"3ga1t6154Z6m"},"source":["**DEFINICION INICIAL DE FUNCIONES Y CUESTIONES INICIALES**\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rnK4HiFYl6RV"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense, Dropout, Masking\n","from sklearn.preprocessing import MinMaxScaler\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","\n","# Función para normalizar datos\n","def normalizar_datos(df):\n","    scaler = MinMaxScaler()\n","    df_norm = pd.DataFrame(scaler.fit_transform(df), columns=df.columns, index=df.index)\n","    return df_norm, scaler\n","\n","# Función para crear secuencias de datos\n","def crear_secuencias(datos, n_pasos):\n","    X, y = [], []\n","    for i in range(n_pasos, len(datos)):\n","        X.append(datos.iloc[i - n_pasos:i].values)\n","        y.append(datos.iloc[i][\"open\"])\n","    return np.array(X), np.array(y)\n","\n","# Función para construir modelo LSTM con Masking para ignorar los ceros\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import GRU, Dense, Dropout, Masking\n","\n","def construir_gru(n_pasos, n_features):\n","    model = Sequential([\n","        Masking(mask_value=0.0, input_shape=(n_pasos, n_features)),  # Ignorar valores 0\n","        GRU(50, return_sequences=True),  # Primera capa GRU\n","        Dropout(0.2),\n","        GRU(50, return_sequences=False),  # Segunda capa GRU\n","        Dropout(0.2),\n","        Dense(25, activation=\"relu\"),  # Capa densa intermedia\n","        Dense(1)  # Capa de salida para predicción\n","    ])\n","    model.compile(optimizer=\"adam\", loss=\"mse\")\n","    return model\n","\n","# Función para construir modelo LSTM con Masking para ignorar los ceros\n","def construir_lstm(n_pasos, n_features):\n","    model = Sequential([\n","        Masking(mask_value=0.0, input_shape=(n_pasos, n_features)),  # Ignorar valores 0\n","        LSTM(50, return_sequences=True),\n","        Dropout(0.2),\n","        LSTM(50, return_sequences=False),\n","        Dropout(0.2),\n","        Dense(25, activation=\"relu\"),\n","        Dense(1)\n","    ])\n","    model.compile(optimizer=\"adam\", loss=\"mse\")\n","    return model\n","\n","\n","  # Crear el DataFrame vacío para almacenar las métricas\n","metricas = pd.DataFrame(columns=[\n","    'RMSE Sin TL',\n","    'RMSE Con TL',\n","    'RMSE Adj. Sin TL',\n","    'RMSE Adj. Con TL',\n","    'MAE Sin TL',\n","    'MAE Con TL',\n","    'R2 Sin TL',\n","    'R2 Con TL',\n","    'MAPE Sin TL',\n","    'MAPE Con TL',\n","    'Porcentaje Train Tesla',\n","    'Modelo (GRU / LSTM)','Años de datos',\n","    'Épocas modelo base',\n","    'Épocas fine-tuning',\n","    'Capas congeladas',\n","])"]},{"cell_type":"markdown","metadata":{"id":"cPlGZ70y4jZN"},"source":["**PREDICCION BOOTSTRAP INTERVALS DEFINITION**"]},{"cell_type":"markdown","metadata":{"id":"-nByOSHT43kW"},"source":["# **MODELO CON REGLAS ESTABLECIDAS DE HIPERPARÁMETROS**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"495hQKposHqL","executionInfo":{"status":"ok","timestamp":1747076598916,"user_tz":-120,"elapsed":3125416,"user":{"displayName":"Santiago Cavassa","userId":"04930650576802271691"}},"outputId":"abbc38c3-987a-45ee-b5dc-165e66fc59aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Años de datos disponibles para AAPL: 19.00\n","Usando modelo LSTM (años de datos: 19.00 > 5)\n","Épocas para modelo base: 40\n","Épocas para fine-tuning: 39\n","Forma de X_spy: (1239, 60, 21)\n","Forma de X_aapl: (4722, 60, 21)\n","Construyendo modelo SPY con parámetros: n_pasos=60, n_features=21\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/masking.py:47: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 76ms/step - loss: 0.0723\n","Epoch 2/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 80ms/step - loss: 0.0062\n","Epoch 3/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 69ms/step - loss: 0.0043\n","Epoch 4/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 65ms/step - loss: 0.0038\n","Epoch 5/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0033\n","Epoch 6/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 65ms/step - loss: 0.0031\n","Epoch 7/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 81ms/step - loss: 0.0033\n","Epoch 8/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 65ms/step - loss: 0.0026\n","Epoch 9/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 75ms/step - loss: 0.0032\n","Epoch 10/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 80ms/step - loss: 0.0024\n","Epoch 11/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 71ms/step - loss: 0.0029\n","Epoch 12/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 65ms/step - loss: 0.0023\n","Epoch 13/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 79ms/step - loss: 0.0022\n","Epoch 14/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 74ms/step - loss: 0.0020\n","Epoch 15/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 71ms/step - loss: 0.0018\n","Epoch 16/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 79ms/step - loss: 0.0019\n","Epoch 17/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 65ms/step - loss: 0.0019\n","Epoch 18/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0020\n","Epoch 19/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 65ms/step - loss: 0.0021\n","Epoch 20/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0017\n","Epoch 21/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 65ms/step - loss: 0.0017\n","Epoch 22/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0015\n","Epoch 23/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 86ms/step - loss: 0.0014\n","Epoch 24/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 65ms/step - loss: 0.0015\n","Epoch 25/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0014\n","Epoch 26/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 65ms/step - loss: 0.0012\n","Epoch 27/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 64ms/step - loss: 0.0016\n","Epoch 28/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0013\n","Epoch 29/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 68ms/step - loss: 0.0011\n","Epoch 30/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 65ms/step - loss: 0.0011\n","Epoch 31/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 69ms/step - loss: 0.0012\n","Epoch 32/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 64ms/step - loss: 0.0012\n","Epoch 33/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 79ms/step - loss: 0.0012\n","Epoch 34/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 64ms/step - loss: 9.0824e-04\n","Epoch 35/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 80ms/step - loss: 0.0010\n","Epoch 36/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 65ms/step - loss: 9.7392e-04\n","Epoch 37/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 68ms/step - loss: 8.9453e-04\n","Epoch 38/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 76ms/step - loss: 8.8038e-04\n","Epoch 39/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 81ms/step - loss: 0.0011\n","Epoch 40/40\n","\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 66ms/step - loss: 7.9890e-04\n","Construyendo modelo AAPL con parámetros: n_pasos=60, n_features=21\n","Epoch 1/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 71ms/step - loss: 0.0154\n","Epoch 2/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 69ms/step - loss: 0.0019\n","Epoch 3/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 71ms/step - loss: 0.0012\n","Epoch 4/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 0.0011\n","Epoch 5/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 75ms/step - loss: 0.0010\n","Epoch 6/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 67ms/step - loss: 8.6600e-04\n","Epoch 7/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 7.3565e-04\n","Epoch 8/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 7.4020e-04\n","Epoch 9/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 6.2267e-04\n","Epoch 10/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 6.9237e-04\n","Epoch 11/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 5.3804e-04\n","Epoch 12/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 67ms/step - loss: 5.1703e-04\n","Epoch 13/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 5.1915e-04\n","Epoch 14/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 4.5457e-04\n","Epoch 15/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 3.9141e-04\n","Epoch 16/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 6.7859e-04\n","Epoch 17/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 3.9505e-04\n","Epoch 18/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 3.5433e-04\n","Epoch 19/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 4.0495e-04\n","Epoch 20/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 3.7812e-04\n","Epoch 21/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 3.3176e-04\n","Epoch 22/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 4.0016e-04\n","Epoch 23/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 2.5987e-04\n","Epoch 24/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 75ms/step - loss: 3.0205e-04\n","Epoch 25/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 72ms/step - loss: 3.3214e-04\n","Epoch 26/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 2.5028e-04\n","Epoch 27/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 2.4697e-04\n","Epoch 28/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 2.4932e-04\n","Epoch 29/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 2.9474e-04\n","Epoch 30/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 67ms/step - loss: 2.2949e-04\n","Epoch 31/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 2.3242e-04\n","Epoch 32/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 1.9963e-04\n","Epoch 33/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 75ms/step - loss: 1.9998e-04\n","Epoch 34/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 69ms/step - loss: 1.8792e-04\n","Epoch 35/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 1.6763e-04\n","Epoch 36/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 2.1894e-04\n","Epoch 37/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 3.7497e-04\n","Epoch 38/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 2.0528e-04\n","Epoch 39/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 1.9148e-04\n","Epoch 40/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 2.0203e-04\n","Epoch 41/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 2.1018e-04\n","Epoch 42/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 2.2466e-04\n","Epoch 43/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 2.4799e-04\n","Epoch 44/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 1.4367e-04\n","Epoch 45/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 70ms/step - loss: 1.8168e-04\n","Epoch 46/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 70ms/step - loss: 1.6023e-04\n","Epoch 47/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 1.3463e-04\n","Epoch 48/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.4632e-04\n","Epoch 49/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 67ms/step - loss: 1.4066e-04\n","Epoch 50/50\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 72ms/step - loss: 1.4137e-04\n","Total de capas entrenables: 4\n","Capas a congelar: 0\n","Capa lstm_28 entrenable\n","Capa lstm_29 entrenable\n","Capa dense_28 entrenable\n","Capa dense_29 entrenable\n","Epoch 1/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 70ms/step - loss: 0.0015\n","Epoch 2/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 7.0816e-04\n","Epoch 3/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 4.8177e-04\n","Epoch 4/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 69ms/step - loss: 4.9219e-04\n","Epoch 5/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 72ms/step - loss: 3.9435e-04\n","Epoch 6/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 68ms/step - loss: 3.8388e-04\n","Epoch 7/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 3.4107e-04\n","Epoch 8/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 73ms/step - loss: 3.4876e-04\n","Epoch 9/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 3.2678e-04\n","Epoch 10/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 71ms/step - loss: 2.8609e-04\n","Epoch 11/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 3.0456e-04\n","Epoch 12/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 72ms/step - loss: 3.2862e-04\n","Epoch 13/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 2.6686e-04\n","Epoch 14/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 2.7675e-04\n","Epoch 15/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 70ms/step - loss: 2.5881e-04\n","Epoch 16/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 2.6399e-04\n","Epoch 17/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 71ms/step - loss: 4.5842e-04\n","Epoch 18/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 2.1951e-04\n","Epoch 19/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.9159e-04\n","Epoch 20/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 2.2198e-04\n","Epoch 21/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 73ms/step - loss: 1.9097e-04\n","Epoch 22/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 69ms/step - loss: 1.8426e-04\n","Epoch 23/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 1.7255e-04\n","Epoch 24/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 1.7277e-04\n","Epoch 25/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 76ms/step - loss: 1.6277e-04\n","Epoch 26/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 68ms/step - loss: 1.6952e-04\n","Epoch 27/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 72ms/step - loss: 1.3977e-04\n","Epoch 28/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 68ms/step - loss: 1.8954e-04\n","Epoch 29/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 73ms/step - loss: 1.3224e-04\n","Epoch 30/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 70ms/step - loss: 1.3061e-04\n","Epoch 31/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 72ms/step - loss: 1.4890e-04\n","Epoch 32/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.6205e-04\n","Epoch 33/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.2333e-04\n","Epoch 34/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.2731e-04\n","Epoch 35/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.4160e-04\n","Epoch 36/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 71ms/step - loss: 1.3561e-04\n","Epoch 37/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 72ms/step - loss: 1.4971e-04\n","Epoch 38/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 70ms/step - loss: 1.0708e-04\n","Epoch 39/39\n","\u001b[1m296/296\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 69ms/step - loss: 1.1166e-04\n","Forma de X_test: (192, 60, 21)\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 35ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 36ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Comparación de métricas:\n","RMSE Sin TL: 43.29, Con TL: 43.91\n","RMSE Adj. Sin TL: 0.2016, Con TL: 0.2044\n","MAE Sin TL: 37.63, Con TL: 37.98\n","R2 Sin TL: -2.3122, Con TL: -2.4072\n","MAPE Sin TL: 16.59%, Con TL: 16.73%\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-34-b878db73a816>:305: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n","  metricas = pd.concat([metricas, nuevas_metricas], ignore_index=False)\n"]}],"source":["from tensorflow.keras.layers import Masking\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","from sklearn.preprocessing import MinMaxScaler\n","from dateutil.relativedelta import relativedelta\n","\n","# 1. CONFIGURACIÓN DE PARÁMETROS\n","año_entrenamiento = 2023\n","n_pasos = 60\n","\n","# 2. DIVISIÓN DEL CONJUNTO DE DATOS\n","df_spy_train = df_spy[:f'2004-12-31']\n","df_aapl_train = df_aapl['2004-12-31':f'{año_entrenamiento}-12-31']\n","\n","año_prueba = año_entrenamiento + 1\n","df_aapl_test = df_aapl[f'{año_prueba}-01-01':f'{año_prueba}-12-31']\n","\n","# Cálculo dinámico de años de datos disponibles para AAPL\n","inicio_aapl = pd.to_datetime('2004-12-31')\n","fin_entrenamiento = pd.to_datetime(f'{año_entrenamiento}-12-31')\n","años_de_datos = (fin_entrenamiento - inicio_aapl).days / 365.25\n","\n","print(f\"Años de datos disponibles para AAPL: {años_de_datos:.2f}\")\n","\n","# Selección dinámica del tipo de modelo\n","if años_de_datos <= 5:\n","    print(f\"Usando modelo GRU (años de datos: {años_de_datos:.2f} ≤ 5)\")\n","    construir_modelo = construir_gru\n","    tipo_modelo = \"GRU\"\n","else:\n","    print(f\"Usando modelo LSTM (años de datos: {años_de_datos:.2f} > 5)\")\n","    construir_modelo = construir_lstm\n","    tipo_modelo = \"LSTM\"\n","\n","# Cálculo dinámico de épocas\n","epocas_modelo_base = max(10, int(50 - (años_de_datos / 2)))\n","epocas_fine_tuning = min(100, int(30 + (años_de_datos / 2)))\n","\n","print(f\"Épocas para modelo base: {epocas_modelo_base}\")\n","print(f\"Épocas para fine-tuning: {epocas_fine_tuning}\")\n","\n","# 3. NORMALIZACIÓN DE DATOS\n","scaler_spy = MinMaxScaler()\n","df_spy_train_norm = pd.DataFrame(scaler_spy.fit_transform(df_spy_train), columns=df_spy.columns, index=df_spy_train.index)\n","\n","scaler_aapl = MinMaxScaler()\n","df_aapl_train_norm = pd.DataFrame(scaler_aapl.fit_transform(df_aapl_train), columns=df_aapl.columns, index=df_aapl_train.index)\n","\n","df_aapl_test_norm = pd.DataFrame(scaler_aapl.transform(df_aapl_test), columns=df_aapl.columns, index=df_aapl_test.index)\n","\n","# 4. CREACIÓN DE SECUENCIAS DE DATOS PARA ENTRENAMIENTO\n","try:\n","    # Usar las funciones de creación de secuencias ya definidas\n","    X_spy, y_spy = crear_secuencias(df_spy_train_norm, n_pasos)\n","    X_aapl, y_aapl = crear_secuencias(df_aapl_train_norm, n_pasos)\n","\n","    print(f\"Forma de X_spy: {X_spy.shape}\")\n","    print(f\"Forma de X_aapl: {X_aapl.shape}\")\n","\n","    # Verificar que las dimensiones sean correctas\n","    if len(X_spy.shape) < 3 or X_spy.shape[0] == 0:\n","        raise ValueError(\"No hay suficientes datos en SPY para crear secuencias válidas\")\n","\n","    if len(X_aapl.shape) < 3 or X_aapl.shape[0] == 0:\n","        raise ValueError(\"No hay suficientes datos en AAPL para crear secuencias válidas\")\n","\n","    # Obtener el número de características\n","    n_features_spy = X_spy.shape[2]\n","    n_features_aapl = X_aapl.shape[2]\n","\n","except Exception as e:\n","    print(f\"Error al crear secuencias: {e}\")\n","    # Crear datos de forma manual si hay un problema\n","    if len(df_spy_train_norm) > n_pasos and len(df_aapl_train_norm) > n_pasos:\n","        # Construir manualmente las secuencias\n","        X_spy = np.array([df_spy_train_norm.values[i:i+n_pasos] for i in range(len(df_spy_train_norm)-n_pasos)])\n","        y_spy = np.array([df_spy_train_norm.values[i+n_pasos, 0] for i in range(len(df_spy_train_norm)-n_pasos)])\n","\n","        X_aapl = np.array([df_aapl_train_norm.values[i:i+n_pasos] for i in range(len(df_aapl_train_norm)-n_pasos)])\n","        y_aapl = np.array([df_aapl_train_norm.values[i+n_pasos, 0] for i in range(len(df_aapl_train_norm)-n_pasos)])\n","\n","        print(f\"Secuencias creadas manualmente. X_spy: {X_spy.shape}, X_aapl: {X_aapl.shape}\")\n","\n","        n_features_spy = X_spy.shape[2] if len(X_spy.shape) == 3 else df_spy_train_norm.shape[1]\n","        n_features_aapl = X_aapl.shape[2] if len(X_aapl.shape) == 3 else df_aapl_train_norm.shape[1]\n","    else:\n","        print(\"No hay suficientes datos para crear secuencias\")\n","        n_features_spy = df_spy_train_norm.shape[1]\n","        n_features_aapl = df_aapl_train_norm.shape[1]\n","        X_spy = np.zeros((1, n_pasos, n_features_spy))\n","        y_spy = np.zeros(1)\n","        X_aapl = np.zeros((1, n_pasos, n_features_aapl))\n","        y_aapl = np.zeros(1)\n","\n","# 5. CONSTRUCCIÓN Y ENTRENAMIENTO DE MODELOS\n","early_stopping = EarlyStopping(monitor='loss', patience=5, restore_best_weights=True)\n","\n","# Modelo base SPY\n","try:\n","    print(f\"Construyendo modelo SPY con parámetros: n_pasos={n_pasos}, n_features={n_features_spy}\")\n","    modelo_spy = construir_modelo(n_pasos, n_features_spy)\n","    modelo_spy.fit(X_spy, y_spy, epochs=epocas_modelo_base, batch_size=16, verbose=1, callbacks=[early_stopping])\n","except Exception as e:\n","    print(f\"Error al construir/entrenar modelo SPY: {e}\")\n","    # Si falla, crear un modelo más simple\n","    modelo_spy = Sequential([\n","        Masking(mask_value=0.0, input_shape=(n_pasos, n_features_spy)),\n","        LSTM(32),\n","        Dense(1)\n","    ])\n","    modelo_spy.compile(optimizer=\"adam\", loss=\"mse\")\n","    print(\"Creado modelo SPY de respaldo\")\n","\n","# Modelo AAPL sin transfer learning\n","try:\n","    print(f\"Construyendo modelo AAPL con parámetros: n_pasos={n_pasos}, n_features={n_features_aapl}\")\n","    modelo_aapl = construir_modelo(n_pasos, n_features_aapl)\n","    modelo_aapl.fit(X_aapl, y_aapl, epochs=50, batch_size=16, verbose=1, callbacks=[early_stopping])\n","except Exception as e:\n","    print(f\"Error al construir/entrenar modelo AAPL: {e}\")\n","    # Si falla, crear un modelo más simple\n","    modelo_aapl = Sequential([\n","        Masking(mask_value=0.0, input_shape=(n_pasos, n_features_aapl)),\n","        LSTM(32),\n","        Dense(1)\n","    ])\n","    modelo_aapl.compile(optimizer=\"adam\", loss=\"mse\")\n","    print(\"Creado modelo AAPL de respaldo\")\n","\n","# 6. TRANSFER LEARNING: AFINAR MODELO SPY CON AAPL\n","try:\n","    modelo_spy_tuned = tf.keras.models.clone_model(modelo_spy)\n","    modelo_spy_tuned.set_weights(modelo_spy.get_weights())\n","\n","    # Cálculo dinámico de capas a congelar\n","    total_capas_entrenables = len([layer for layer in modelo_spy_tuned.layers if len(layer.weights) > 0])\n","    capas_a_congelar = max(0, int(total_capas_entrenables - (años_de_datos / 2)))\n","\n","    print(f\"Total de capas entrenables: {total_capas_entrenables}\")\n","    print(f\"Capas a congelar: {capas_a_congelar}\")\n","\n","    # Congelar capas según la fórmula\n","    capas_congeladas = 0\n","    for layer in modelo_spy_tuned.layers:\n","        if len(layer.weights) > 0:  # Solo considerar capas con pesos\n","            if capas_congeladas < capas_a_congelar:\n","                layer.trainable = False\n","                capas_congeladas += 1\n","                print(f\"Capa {layer.name} congelada\")\n","            else:\n","                layer.trainable = True\n","                print(f\"Capa {layer.name} entrenable\")\n","\n","    modelo_spy_tuned.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005), loss=\"mse\")\n","    modelo_spy_tuned.fit(X_aapl, y_aapl, epochs=epocas_fine_tuning, batch_size=16, verbose=1, callbacks=[early_stopping])\n","except Exception as e:\n","    print(f\"Error en transfer learning: {e}\")\n","    modelo_spy_tuned = modelo_aapl  # Usar el modelo no transferido como respaldo\n","    capas_a_congelar = 0\n","\n","# 7. PREDICCIONES EN DATOS DE TEST\n","try:\n","    X_test, y_test = crear_secuencias(df_aapl_test_norm, n_pasos)\n","    print(f\"Forma de X_test: {X_test.shape}\")\n","except Exception as e:\n","    print(f\"Error al crear secuencias de test: {e}\")\n","    # Crear manualmente\n","    if len(df_aapl_test_norm) > n_pasos:\n","        X_test = np.array([df_aapl_test_norm.values[i:i+n_pasos] for i in range(len(df_aapl_test_norm)-n_pasos)])\n","        y_test = np.array([df_aapl_test_norm.values[i+n_pasos, 0] for i in range(len(df_aapl_test_norm)-n_pasos)])\n","    else:\n","        print(\"No hay suficientes datos de test\")\n","        # Crear datos vacíos para evitar errores\n","        X_test = np.zeros((1, n_pasos, df_aapl_test_norm.shape[1]))\n","        y_test = np.zeros(1)\n","\n","try:\n","    pred_sin_tl = modelo_aapl.predict(X_test)\n","    pred_con_tl = modelo_spy_tuned.predict(X_test)\n","except Exception as e:\n","    print(f\"Error al hacer predicciones: {e}\")\n","    # Crear predicciones ficticias\n","    pred_sin_tl = np.zeros((len(y_test), 1))\n","    pred_con_tl = np.zeros((len(y_test), 1))\n","\n","# 8. DESNORMALIZACIÓN DE PREDICCIONES\n","try:\n","    # Crear arrays completos para desnormalizar\n","    y_test_array = np.zeros((y_test.shape[0], df_aapl.shape[1]))\n","    y_test_array[:, 0] = y_test  # La primera columna es 'open'\n","\n","    pred_sin_tl_array = np.zeros((pred_sin_tl.shape[0], df_aapl.shape[1]))\n","    pred_sin_tl_array[:, 0] = pred_sin_tl.flatten()\n","\n","    pred_con_tl_array = np.zeros((pred_con_tl.shape[0], df_aapl.shape[1]))\n","    pred_con_tl_array[:, 0] = pred_con_tl.flatten()\n","\n","    # Desnormalizar\n","    y_test_real = scaler_aapl.inverse_transform(y_test_array)[:, 0]\n","    pred_sin_tl_real = scaler_aapl.inverse_transform(pred_sin_tl_array)[:, 0]\n","    pred_con_tl_real = scaler_aapl.inverse_transform(pred_con_tl_array)[:, 0]\n","\n","except Exception as e:\n","    print(f\"Error al desnormalizar: {e}\")\n","\n","    try:\n","        # Método alternativo de respaldo\n","        y_test_reshape = y_test.reshape(-1, 1)\n","        empty_data = np.zeros((y_test.shape[0], df_aapl.shape[1] - 1))\n","        y_test_full = np.hstack([y_test_reshape, empty_data])\n","        y_test_real = scaler_aapl.inverse_transform(y_test_full)[:, 0]\n","\n","        pred_sin_tl_reshape = pred_sin_tl.reshape(-1, 1)\n","        pred_sin_tl_full = np.hstack([pred_sin_tl_reshape, empty_data])\n","        pred_sin_tl_real = scaler_aapl.inverse_transform(pred_sin_tl_full)[:, 0]\n","\n","        pred_con_tl_reshape = pred_con_tl.reshape(-1, 1)\n","        pred_con_tl_full = np.hstack([pred_con_tl_reshape, empty_data])\n","        pred_con_tl_real = scaler_aapl.inverse_transform(pred_con_tl_full)[:, 0]\n","    except:\n","        # Si todo falla, usar valores sin transformar\n","        print(\"Usando valores sin desnormalizar para las métricas\")\n","        y_test_real = y_test\n","        pred_sin_tl_real = pred_sin_tl.flatten()\n","        pred_con_tl_real = pred_con_tl.flatten()\n","\n","# 9. CÁLCULO DE MÉTRICAS DE ERROR\n","try:\n","    rmse_sin_tl = np.sqrt(mean_squared_error(y_test_real, pred_sin_tl_real))\n","    rmse_con_tl = np.sqrt(mean_squared_error(y_test_real, pred_con_tl_real))\n","\n","    rmse_adj_sin_tl = rmse_sin_tl / np.average(y_test_real) if np.average(y_test_real) != 0 else 0\n","    rmse_adj_con_tl = rmse_con_tl / np.average(y_test_real) if np.average(y_test_real) != 0 else 0\n","\n","    mae_sin_tl = mean_absolute_error(y_test_real, pred_sin_tl_real)\n","    mae_con_tl = mean_absolute_error(y_test_real, pred_con_tl_real)\n","\n","    r2_sin_tl = r2_score(y_test_real, pred_sin_tl_real)\n","    r2_con_tl = r2_score(y_test_real, pred_con_tl_real)\n","\n","    # Evitar división por cero en MAPE\n","    epsilon = 1e-10  # Pequeño valor para evitar división por cero\n","    y_test_real_safe = np.where(y_test_real == 0, epsilon, y_test_real)\n","    mape_sin_tl = np.mean(np.abs((y_test_real - pred_sin_tl_real) / y_test_real_safe)) * 100\n","    mape_con_tl = np.mean(np.abs((y_test_real - pred_con_tl_real) / y_test_real_safe)) * 100\n","except Exception as e:\n","    print(f\"Error al calcular métricas: {e}\")\n","    # Valores predeterminados\n","    rmse_sin_tl = rmse_con_tl = rmse_adj_sin_tl = rmse_adj_con_tl = 0\n","    mae_sin_tl = mae_con_tl = mape_sin_tl = mape_con_tl = 0\n","    r2_sin_tl = r2_con_tl = 0\n","\n","# 10. GRÁFICO DE COMPARACIÓN DE MODELOS\n","try:\n","    plt.figure(figsize=(15, 7))\n","    plt.plot(df_aapl_test.iloc[n_pasos:].index[:len(y_test_real)], y_test_real, label=\"AAPL Real\", color=\"black\", linewidth=2)\n","    plt.plot(df_aapl_test.iloc[n_pasos:].index[:len(pred_sin_tl_real)], pred_sin_tl_real, label=\"Sin TL\", color=\"red\", linestyle=\"dashed\")\n","    plt.plot(df_aapl_test.iloc[n_pasos:].index[:len(pred_con_tl_real)], pred_con_tl_real, label=\"Con TL\", color=\"blue\", linestyle=\"dashed\")\n","    plt.title(f\"Comparación de Modelos {tipo_modelo} para AAPL (Test: {año_entrenamiento+1})\")\n","    plt.xlabel(\"Fecha\")\n","    plt.ylabel(\"Precio de Apertura ($)\")\n","    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(30))\n","    plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter(\"%b-%Y\"))\n","    plt.legend()\n","    plt.grid(True)\n","    plt.show()\n","except Exception as e:\n","    print(f\"Error al crear gráfico: {e}\")\n","\n","# 11. ALMACENAR MÉTRICAS EN UN DATAFRAME\n","try:\n","    porcentaje_train_aapl = len(df_aapl_train) / len(df_aapl) * 100\n","\n","    nuevas_metricas = pd.DataFrame({\n","        'RMSE Sin TL': [rmse_sin_tl],\n","        'RMSE Con TL': [rmse_con_tl],\n","        'RMSE Adj. Sin TL': [rmse_adj_sin_tl],\n","        'RMSE Adj. Con TL': [rmse_adj_con_tl],\n","        'MAE Sin TL': [mae_sin_tl],\n","        'MAE Con TL': [mae_con_tl],\n","        'R2 Sin TL': [r2_sin_tl],\n","        'R2 Con TL': [r2_con_tl],\n","        'MAPE Sin TL': [mape_sin_tl],\n","        'MAPE Con TL': [mape_con_tl],\n","        'Porcentaje Train AAPL': [porcentaje_train_aapl],\n","        'Modelo (GRU / LSTM)': [tipo_modelo],\n","        'Años de datos': [años_de_datos],\n","        'Épocas modelo base': [epocas_modelo_base],\n","        'Épocas fine-tuning': [epocas_fine_tuning],\n","        'Capas congeladas': [capas_a_congelar]\n","    }, index=[f'Año {año_entrenamiento}+{1}'])\n","\n","    # Cambiar \"Tesla\" por \"AAPL\" en las columnas de metricas\n","    metricas_cols = list(metricas.columns)\n","    if 'Porcentaje Train Tesla' in metricas_cols:\n","        # Crear un diccionario para renombrar columnas\n","        rename_dict = {'Porcentaje Train Tesla': 'Porcentaje Train AAPL'}\n","        metricas = metricas.rename(columns=rename_dict)\n","\n","    # Concatenar con el DataFrame de métricas existente\n","    metricas = pd.concat([metricas, nuevas_metricas], ignore_index=False)\n","\n","except Exception as e:\n","    print(f\"Error al almacenar métricas: {e}\")\n","\n","# Mostrar las métricas\n","print(\"\\nComparación de métricas:\")\n","print(f\"RMSE Sin TL: {rmse_sin_tl:.2f}, Con TL: {rmse_con_tl:.2f}\")\n","print(f\"RMSE Adj. Sin TL: {rmse_adj_sin_tl:.4f}, Con TL: {rmse_adj_con_tl:.4f}\")\n","print(f\"MAE Sin TL: {mae_sin_tl:.2f}, Con TL: {mae_con_tl:.2f}\")\n","print(f\"R2 Sin TL: {r2_sin_tl:.4f}, Con TL: {r2_con_tl:.4f}\")\n","print(f\"MAPE Sin TL: {mape_sin_tl:.2f}%, Con TL: {mape_con_tl:.2f}%\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1747077059153,"user":{"displayName":"Santiago Cavassa","userId":"04930650576802271691"},"user_tz":-120},"id":"94OGvtVLTPai","outputId":"a8994d5e-f792-44d0-ddc7-2093665d9ee7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            RMSE Sin TL  RMSE Con TL  RMSE Adj. Sin TL  RMSE Adj. Con TL  \\\n","Año 2023+1    43.292234    43.908555          0.201579          0.204449   \n","\n","            MAE Sin TL  MAE Con TL  R2 Sin TL  R2 Con TL  MAPE Sin TL  \\\n","Año 2023+1   37.628268   37.981985  -2.312206  -2.407184    16.589254   \n","\n","            MAPE Con TL  Porcentaje Train AAPL Modelo (GRU / LSTM)  \\\n","Año 2023+1    16.728485              75.521162                LSTM   \n","\n","            Años de datos Épocas modelo base Épocas fine-tuning  \\\n","Año 2023+1      18.997947                 40                 39   \n","\n","           Capas congeladas  \n","Año 2023+1                0  "],"text/html":["\n","  <div id=\"df-70e27eb0-f634-47d9-aaab-c6bbc23a9a82\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RMSE Sin TL</th>\n","      <th>RMSE Con TL</th>\n","      <th>RMSE Adj. Sin TL</th>\n","      <th>RMSE Adj. Con TL</th>\n","      <th>MAE Sin TL</th>\n","      <th>MAE Con TL</th>\n","      <th>R2 Sin TL</th>\n","      <th>R2 Con TL</th>\n","      <th>MAPE Sin TL</th>\n","      <th>MAPE Con TL</th>\n","      <th>Porcentaje Train AAPL</th>\n","      <th>Modelo (GRU / LSTM)</th>\n","      <th>Años de datos</th>\n","      <th>Épocas modelo base</th>\n","      <th>Épocas fine-tuning</th>\n","      <th>Capas congeladas</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Año 2023+1</th>\n","      <td>43.292234</td>\n","      <td>43.908555</td>\n","      <td>0.201579</td>\n","      <td>0.204449</td>\n","      <td>37.628268</td>\n","      <td>37.981985</td>\n","      <td>-2.312206</td>\n","      <td>-2.407184</td>\n","      <td>16.589254</td>\n","      <td>16.728485</td>\n","      <td>75.521162</td>\n","      <td>LSTM</td>\n","      <td>18.997947</td>\n","      <td>40</td>\n","      <td>39</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70e27eb0-f634-47d9-aaab-c6bbc23a9a82')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-70e27eb0-f634-47d9-aaab-c6bbc23a9a82 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-70e27eb0-f634-47d9-aaab-c6bbc23a9a82');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_ab7532d1-fd40-4eaa-b76c-b8a75b3e03c3\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ab7532d1-fd40-4eaa-b76c-b8a75b3e03c3 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metricas","summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"RMSE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 43.29223385548534,\n        \"max\": 43.29223385548534,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          43.29223385548534\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 43.9085551122253,\n        \"max\": 43.9085551122253,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          43.9085551122253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Adj. Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.20157915311846167,\n        \"max\": 0.20157915311846167,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.20157915311846167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Adj. Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.20444889454592569,\n        \"max\": 0.20444889454592569,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.20444889454592569\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 37.62826770875821,\n        \"max\": 37.62826770875821,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          37.62826770875821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 37.98198482686428,\n        \"max\": 37.98198482686428,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          37.98198482686428\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2 Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -2.3122056113518403,\n        \"max\": -2.3122056113518403,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -2.3122056113518403\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2 Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -2.4071840132949696,\n        \"max\": -2.4071840132949696,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -2.4071840132949696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 16.58925363203965,\n        \"max\": 16.58925363203965,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          16.58925363203965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 16.728485202562236,\n        \"max\": 16.728485202562236,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          16.728485202562236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Porcentaje Train AAPL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 75.52116234996842,\n        \"max\": 75.52116234996842,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          75.52116234996842\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Modelo (GRU / LSTM)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LSTM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A\\u00f1os de datos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.99794661190965,\n        \"max\": 18.99794661190965,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.99794661190965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u00c9pocas modelo base\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 40,\n        \"max\": 40,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u00c9pocas fine-tuning\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 39,\n        \"max\": 39,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Capas congeladas\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}],"source":["metricas"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1741481150483,"user":{"displayName":"Santiago Cavassa","userId":"04930650576802271691"},"user_tz":-60},"id":"kAIc3-m2XV_W","outputId":"480b8300-8e02-4a9b-8418-d836dd31d0a5"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"metricas\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"RMSE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.354063059460135,\n        \"min\": 1.6606155905959976,\n        \"max\": 38.81105222003587,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.5008916472455947,\n          38.81105222003587,\n          1.6606155905959976\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.665529120506772,\n        \"min\": 1.0626830792683786,\n        \"max\": 42.74114676755916,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.338057059149365,\n          42.74114676755916,\n          1.0626830792683786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Adj. Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3259760257277139,\n        \"min\": 0.12047519504386525,\n        \"max\": 0.8024677941924622,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.17522138612657015,\n          0.16079699509713977,\n          0.8024677941924622\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE Adj. Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18859866292981525,\n        \"min\": 0.09374904861584733,\n        \"max\": 0.5135257981289271,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.09374904861584733,\n          0.17707966092404462,\n          0.5135257981289271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.08370133427924,\n        \"min\": 1.583506905846324,\n        \"max\": 31.754051009326428,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.2834574958007354,\n          31.754051009326428,\n          1.583506905846324\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.609570186497855,\n        \"min\": 0.9503804978797312,\n        \"max\": 31.223866973378062,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.2935446211120305,\n          28.418278354373257,\n          0.9503804978797312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2 Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.992840252662305,\n        \"min\": -110.45566670405132,\n        \"max\": 0.7476111148621055,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -3.04065979588471,\n          0.7476111148621055,\n          -110.45566670405132\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2 Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.496889252572476,\n        \"min\": -44.64271428610356,\n        \"max\": 0.6939081744714958,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.1566762052655306,\n          0.6939081744714958,\n          -44.64271428610356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE Sin TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.64374084959217,\n        \"min\": 7.756124569435303,\n        \"max\": 77.07131746985915,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          16.263140718374146,\n          12.447811795641133,\n          77.07131746985915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE Con TL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.658648094065853,\n        \"min\": 9.191286901181206,\n        \"max\": 47.28015060406532,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.191286901181206,\n          9.692729929450532,\n          47.28015060406532\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Porcentaje Train Tesla\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.61006899017763,\n        \"min\": 10.460021905805037,\n        \"max\": 93.09967141292442,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          38.0065717415115,\n          93.09967141292442,\n          10.460021905805037\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mejora RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.20200368340636,\n        \"min\": -31.697172559718002,\n        \"max\": 46.49680002638019,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          46.49680002638019,\n          -10.126225192870221,\n          36.006678168848225\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mejora RMSE Adj\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.20200368340636,\n        \"min\": -31.697172559718013,\n        \"max\": 46.4968000263802,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          46.4968000263802,\n          -10.126225192870216,\n          36.00667816884822\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mejora MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.179532552090166,\n        \"min\": -36.973742985545044,\n        \"max\": 43.35149117113626,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          43.35149117113626,\n          10.50503022109975,\n          39.98254795284337\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mejora MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.061711866303035,\n        \"min\": -43.25249754414329,\n        \"max\": 43.48393671096468,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          43.48393671096468,\n          22.133061709330722,\n          38.654025704756485\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"metricas"},"text/html":["\n","  <div id=\"df-ab914cec-8765-4fd8-ac20-3640247ba274\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RMSE Sin TL</th>\n","      <th>RMSE Con TL</th>\n","      <th>RMSE Adj. Sin TL</th>\n","      <th>RMSE Adj. Con TL</th>\n","      <th>MAE Sin TL</th>\n","      <th>MAE Con TL</th>\n","      <th>R2 Sin TL</th>\n","      <th>R2 Con TL</th>\n","      <th>MAPE Sin TL</th>\n","      <th>MAPE Con TL</th>\n","      <th>Porcentaje Train Tesla</th>\n","      <th>Mejora RMSE</th>\n","      <th>Mejora RMSE Adj</th>\n","      <th>Mejora MAE</th>\n","      <th>Mejora MAPE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Año 2011+1</th>\n","      <td>1.660616</td>\n","      <td>1.062683</td>\n","      <td>0.802468</td>\n","      <td>0.513526</td>\n","      <td>1.583507</td>\n","      <td>0.950380</td>\n","      <td>-110.455667</td>\n","      <td>-44.642714</td>\n","      <td>77.071317</td>\n","      <td>47.280151</td>\n","      <td>10.460022</td>\n","      <td>36.006678</td>\n","      <td>36.006678</td>\n","      <td>39.982548</td>\n","      <td>38.654026</td>\n","    </tr>\n","    <tr>\n","      <th>Año 2015+1</th>\n","      <td>2.500892</td>\n","      <td>1.338057</td>\n","      <td>0.175221</td>\n","      <td>0.093749</td>\n","      <td>2.283457</td>\n","      <td>1.293545</td>\n","      <td>-3.040660</td>\n","      <td>-0.156676</td>\n","      <td>16.263141</td>\n","      <td>9.191287</td>\n","      <td>38.006572</td>\n","      <td>46.496800</td>\n","      <td>46.496800</td>\n","      <td>43.351491</td>\n","      <td>43.483937</td>\n","    </tr>\n","    <tr>\n","      <th>Año 2020+1</th>\n","      <td>31.605249</td>\n","      <td>41.623220</td>\n","      <td>0.120475</td>\n","      <td>0.158662</td>\n","      <td>22.795513</td>\n","      <td>31.223867</td>\n","      <td>0.710747</td>\n","      <td>0.498316</td>\n","      <td>7.756125</td>\n","      <td>11.110842</td>\n","      <td>72.480832</td>\n","      <td>-31.697173</td>\n","      <td>-31.697173</td>\n","      <td>-36.973743</td>\n","      <td>-43.252498</td>\n","    </tr>\n","    <tr>\n","      <th>Año 2023+1</th>\n","      <td>38.811052</td>\n","      <td>42.741147</td>\n","      <td>0.160797</td>\n","      <td>0.177080</td>\n","      <td>31.754051</td>\n","      <td>28.418278</td>\n","      <td>0.747611</td>\n","      <td>0.693908</td>\n","      <td>12.447812</td>\n","      <td>9.692730</td>\n","      <td>93.099671</td>\n","      <td>-10.126225</td>\n","      <td>-10.126225</td>\n","      <td>10.505030</td>\n","      <td>22.133062</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab914cec-8765-4fd8-ac20-3640247ba274')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ab914cec-8765-4fd8-ac20-3640247ba274 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ab914cec-8765-4fd8-ac20-3640247ba274');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-71946ed1-8dc8-4bb0-8d5c-b452585adc09\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71946ed1-8dc8-4bb0-8d5c-b452585adc09')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-71946ed1-8dc8-4bb0-8d5c-b452585adc09 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ab098a41-b961-4cfc-ac5f-380d118fe15c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('metricas')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ab098a41-b961-4cfc-ac5f-380d118fe15c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('metricas');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["            RMSE Sin TL  RMSE Con TL  RMSE Adj. Sin TL  RMSE Adj. Con TL  \\\n","Año 2011+1     1.660616     1.062683          0.802468          0.513526   \n","Año 2015+1     2.500892     1.338057          0.175221          0.093749   \n","Año 2020+1    31.605249    41.623220          0.120475          0.158662   \n","Año 2023+1    38.811052    42.741147          0.160797          0.177080   \n","\n","            MAE Sin TL  MAE Con TL   R2 Sin TL  R2 Con TL  MAPE Sin TL  \\\n","Año 2011+1    1.583507    0.950380 -110.455667 -44.642714    77.071317   \n","Año 2015+1    2.283457    1.293545   -3.040660  -0.156676    16.263141   \n","Año 2020+1   22.795513   31.223867    0.710747   0.498316     7.756125   \n","Año 2023+1   31.754051   28.418278    0.747611   0.693908    12.447812   \n","\n","            MAPE Con TL  Porcentaje Train Tesla  Mejora RMSE  Mejora RMSE Adj  \\\n","Año 2011+1    47.280151               10.460022    36.006678        36.006678   \n","Año 2015+1     9.191287               38.006572    46.496800        46.496800   \n","Año 2020+1    11.110842               72.480832   -31.697173       -31.697173   \n","Año 2023+1     9.692730               93.099671   -10.126225       -10.126225   \n","\n","            Mejora MAE  Mejora MAPE  \n","Año 2011+1   39.982548    38.654026  \n","Año 2015+1   43.351491    43.483937  \n","Año 2020+1  -36.973743   -43.252498  \n","Año 2023+1   10.505030    22.133062  "]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["metricas"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ItF44ZAcXRg5"},"outputs":[],"source":["\n","# Apply round function to all numeric columns in the 'metricas' DataFrame\n","metricas = metricas.round(2)\n"]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1bjsxX66zCypRHG2MipM4ttYPLFxwl53Q","authorship_tag":"ABX9TyOsOPnhmKKibJdQyo+QN57z"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}